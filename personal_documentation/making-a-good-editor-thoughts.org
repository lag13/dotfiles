* Preamble
I want to try and make the "perfect" "text editor" (but really I
mean "computing environment") and will (probably very slowly)
accumulate my thoughts here. Mostly I believe the end product here
will be a configuration of keybindings that feels more consistent
and makes more sense (at least to me).

The motivation here is that I want my editor to be better. I want it
to feel like there's less "distance" between what I think in my head
and how that translates to characters/actions happening on the screen.
I want to get rid of all these inconsistencies I've found when I've
played around with vim and emacs. I want all the keybindings to make
some sort of sense linguistically. I don't really feel like it will
NECESSARILY make me a more efficient developer (after all, I've seen
developers who just use basic editor features who are WAYYYY more
efficient than me) but I think using a better editor will be more fun.
Also, if the keybindings are more consistent I'd have less crazy
keybindings to remember (I'm looking at you emacs).

In trying to make a better editor (remember, think "computing
environment") I'm also hoping that it helps to clarify all the
essential actions that text editor should do which (like the
configuration consistency) will hopefully keep it all straight in my
head!

God, I read back what I write sometimes and I feel like I'm wayyyyyy
too deep into this vim/emacs/editor stuff haha. Sometimes I don't even
know if my criticisms/thoughts surrounding editors have any basis in
reality anymore! Like, maybe if I used a text editor which was more
mouse heavy it would all be fine and I would be pretty much just as
productive? I'm probably making this all way too complicated honestly.
As my buddy Sheng once said when introducing me to visual studio code
(I'm paraphrasing): "it has a fuzzy file finder, a way to search for
terms within a directory, and knowledge of languages which allow you
to jump to definition and such. What more do you need?". At this point
I kind of enjoy thinking about this stuff though so I will press on!

* Explaining this to a non-programmer
I wanted to adequately explain what I'm doing to a non-programmer
friend of mine so I started writing this to be able to actually share
with them instead of just having an exchange like, "what did you do
last night?" to which I reply "oh.... (thinks for a bit about trying
to talk about it then abandons the notion) I just chilled, not much
happened".

...

I did some programming related stuff. So, when I program I use a piece
of software called a "text editor" (think microsoft word but without
the formatting, there are many of them out there) and I'm trying to
come up with a consistent set of keybindings/shortcuts for my text
editor AND make sure it has all the features I want. It's kind of a
peaceful activity. Kind of gives a feeling of doing word games since
I'm trying to map individual keys (like the 'e' key) to a behavior but
there's a lot of keys and could be used for multiple behaviors (like
maybe the 'e' key could be used to "erase" text or maybe it could be
used to go to the "end" of a word).

I could probably just use an editor that is more mouse heavy, but I
like keyboard driven editors. Partly this could be a case of stockholm
syndrome as I've been using them for almost all of my programming
life. Partly it could be because I've never (at least as of
2021-12-18) really owned a mouse in part because I've never had a
proper desk setup so I'll often be programming on a couch or on the
floor leaning up against the wall. Partly maybe I like it because it
just looks cool sometimes. Part of me thinks it can make text editing
more fun. Part of me thinks that it CAN be more efficient although
I've never done tests of that so I really have no idea.

* Operators
This is like a vim operator which would perform it's action on a "text
object"
- copy
- delete
- cut
- change/alter (i.e. delete then enter insert mode)
- replace (i.e. paste over)
- comment/uncomment
- evaluate (like for a repl)
- upper/lower case region
- narrow
- size window
- surround
- transpose (be in between two text objects and it will switch them)
- exchange (same as transpose but arbitrary text objects)
  
* Movements
- search forwards/backwards
- go forward to the 
- character
- word (maybe this should just be WORD? Do we need both?)
- end of line
- begging of line
- entire line
- sentence
- paragraph
- entire buffer
- matching pairs of (), [], {}
- up/down/previous/next indent level (also start/end current indent
  level)
- Traversing a tree structure. I've got lisp in mind but it could
  probably work for other things too:
  - up the tree one level
  - down the tree one level (I guess to the closest node)
  - to the next node on the current level
  - to the previous node on the current level
  - to the end of the current node
  - to the start of the current node
  - to the top level form
- In a repl:
  - The previous command's output
  - The previous command's output PLUS the command itself

* Text objects (anything that isn't already a motion)
- email
- url
- number
- current indent level

* Structured Editing (paredit basically)
http://danmidwood.com/content/2014/11/21/animated-paredit.html
- slurp
- barf
- raise
- splice
- split
- join
- convolute

* Buffer
- next/previous buffer
- next/previous buffer in a grouped list. For example, I could have a
  list of multiple shell buffers and traverse it.
- fuzzy search buffers

* Files
- open file
- fuzzy search files within a "project"
- rename file (or make sure repl handles it)
- remove file (or make sure repl handles it)

* Windows
- split window vertically
- split window horizontally
- close window
- make window only window
- make window larger
- make window smaller
- scroll window up/down by line
- scroll window up/down by more

* REPL
- search backwards/forwards through previous commands
- bring up previous/next command
- enter a "copy" mode where you can leave the command line portion of
  the repl to traverse all the output. Or maybe you don't even need
  it?
- open up a repl from any buffer (technically could just do a regular
  buffer switch but I think a repl might be more important to get
  loaded up quickly)

* Undo
I think I want a combination of vim and emacs's undo functionality:
- A dedicated redo which a la vim
- I think I still want emacs's undo chunking at least when I'm editing
  more textual things because I feel like when I'm writing prose I'll
  just sit in "insert" mode and mess around for a while so I want that
  fine grained control.

* Miscellaneous
- highlight by char, line, and block
- paste
- multiple cursors
- record/execute macro
- replace regex

* Key mappings
I think I just want to start trying to map keys and see how it feels.
I think, ultimately, when I have a sequence of keys to type, I don't
want to have to have a shifted key in there.

Okay so for a little while I was trying to do the above, namely, just
writing out all the keys on the keyboard and trying to assign them to
actions. I think what might help me here though is writing some code.
I'm picturing that I have a map from actions I want to perform to
another map who's keys are possible keybindings for those actions and
who's values are an explanation as to why that keybinding was chosen.
With this structure, we can kind of be fast and loose with assigning
possible keybindings to actions (kind of a "no bad ideas" thing going
on) and then we can let the algorithm generate all the possible
keybindings and I can choose one which feels good:

#+begin_src elisp
  ;; TODO: I feel like I'll want to build in the concept of "operators"
  ;; vs "text objects/motions". At it's essence, different namespaces of
  ;; keybindings I suppose. Or... maybe I just call this function again
  ;; with a different data structure and I just know that it represents
  ;; bindings in a different namespace? Feels like it could be nice to
  ;; have them all in one place though.

  ;; TODO: I might need to build in the concept of a "sequence" of keys
  ;; to press instead of just the string I have now.
  (defun generate-possible-editor-keybindings (editor-behavior-to-possible-keys)
    (let (res)
      (cond
       ((-some #'ht-empty? (ht-values editor-behavior-to-possible-keys))
        nil)
       ((ht-empty? editor-behavior-to-possible-keys)
        (list (ht)))
       (t
        (let* ((action (ht-key editor-behavior-to-possible-keys))
               (possible-keys (ht-get editor-behavior-to-possible-keys action)))
          (ht-remove! editor-behavior-to-possible-keys action)
          (dolist (possible-key (ht-keys possible-keys))
            (let ((copy (ht-deep-copy editor-behavior-to-possible-keys))
                  (also-must-bind (or (plist-get (ht-get possible-keys possible-key) :also-must-bind) (ht))))
              ;; remove the keybinding we're assigning to an action from
              ;; underneath all other actions
              (ht-each (lambda (_action possible-keys) (ht-remove! possible-keys possible-key)) copy)
              (let ((all-keybindings
                     (-filter
                      (lambda (actions->keys)
                        (and
                         ;; every other key must allow this key to be bound
                         (-every (-lambda ((bound-action bound-key))
                                   (-if-let* ((also-must-bind
                                               (-> editor-behavior-to-possible-keys
                                                   (ht-get bound-action)
                                                   (ht-get bound-key)
                                                   (plist-get :also-must-bind)))
                                              (desired-key (ht-get also-must-bind action)))
                                       (if (stringp desired-key)
                                           (equal possible-key desired-key)
                                         (-contains? desired-key possible-key))
                                     t))
                                 (ht-items actions->keys))
                         ;; every key in the mapping must honor this
                         ;; key's "must bind" attribute.
                         (-every (-lambda ((must-bind-action must-bind-key))
                                   (if (stringp must-bind-key)
                                       (equal must-bind-key (ht-get actions->keys must-bind-action must-bind-key))
                                     (-contains? must-bind-key (ht-get actions->keys must-bind-action must-bind-key))))
                                 (ht-items also-must-bind))))
                      (generate-possible-editor-keybindings copy))))
                (-each all-keybindings
                  (lambda (actions->keys)
                    (ht-set! actions->keys action possible-key)))
                (setq res (append res all-keybindings))))))
        res))))

  (ert-deftest generate-possible-editor-keybindings ()
    "Tests out the basic functionality of my function which
  geneerates a bunch of key maps."
    (should (set-equal? (generate-possible-editor-keybindings (ht)) (list (ht))))
    (should (set-equal?
             (generate-possible-editor-keybindings
              (ht ("replace text"
                   (ht ("s" nil)
                       ("r" nil)))
                  ("search forwards"
                   (ht ("s" nil)
                       ("f" nil)))
                  ("repeat last command"
                   (ht ("r" nil)))
                  ("forward to single char"
                   (ht ("f" nil)))))
             nil))
    (should (set-equal?
             (generate-possible-editor-keybindings
              (ht ("highlight text"
                   (ht ("v" nil)
                       ("h" nil)
                       ("s" nil)))
                  ("evaluate code"
                   (ht ("v" nil)
                       ("e" nil)))
                  ("replace text"
                   (ht ("r" nil)
                       ("s" nil)))))
             (list
              (ht ("highlight text" "v")
                  ("evaluate code" "e")
                  ("replace text" "r"))
              (ht ("highlight text" "v")
                  ("evaluate code" "e")
                  ("replace text" "s"))
              (ht ("highlight text" "h")
                  ("evaluate code" "v")
                  ("replace text" "r"))
              (ht ("highlight text" "h")
                  ("evaluate code" "v")
                  ("replace text" "s"))
              (ht ("highlight text" "h")
                  ("evaluate code" "e")
                  ("replace text" "r"))
              (ht ("highlight text" "h")
                  ("evaluate code" "e")
                  ("replace text" "s"))
              (ht ("highlight text" "s")
                  ("evaluate code" "v")
                  ("replace text" "r"))
              (ht ("highlight text" "s")
                  ("evaluate code" "e")
                  ("replace text" "r")))))
    ;; Checks that grouped bindings are correctly honored. Use case here
    ;; is that some bindings only really make sense if a specific
    ;; binding happens. Could be used to make sure shifted and unshifted
    ;; key variants are always both bound which is good for making sure
    ;; the keybindings "make sense". For example, 'u' could be "undo" in
    ;; vim and 'U' could be "redo" but if the regular undo feature was
    ;; bound to C-z then we probably wouldn't want to bind 'U' anymore.
    (should (set-equal?
             (generate-possible-editor-keybindings
              (ht ("move cursor down one line"
                   (ht ("n" nil)
                       ("j" (list :also-must-bind
                                  (ht ("move cursor left" "h")
                                      ("move cursor up one line" "k")
                                      ("move cursor right" "l"))))))
                  ("move cursor up one line"
                   (ht ("p" nil)
                       ("k" (list :also-must-bind
                                  (ht ("move cursor left" "h")
                                      ("move cursor down one line" "j")
                                      ("move cursor right" "l"))))))
                  ("move cursor left"
                   (ht ("b" nil)
                       ("h" (list :also-must-bind
                                  (ht ("move cursor down one line" "j")
                                      ("move cursor up one line" "k")
                                      ("move cursor right" "l"))))))
                  ("move cursor right"
                   (ht ("f" nil)
                       ("l" (list :also-must-bind
                                  (ht ("move cursor down one line" "j")
                                      ("move cursor up one line" "k")
                                      ("move cursor left" "h"))))))
                  ("lookup documentation"
                   (ht ("h" nil)
                       ("k" nil)
                       ("d" nil)))))
             (list
              (ht ("move cursor down one line" "n")
                  ("move cursor up one line" "p")
                  ("move cursor left" "b")
                  ("move cursor right" "f")
                  ("lookup documentation" "h"))
              (ht ("move cursor down one line" "n")
                  ("move cursor up one line" "p")
                  ("move cursor left" "b")
                  ("move cursor right" "f")
                  ("lookup documentation" "k"))
              (ht ("move cursor down one line" "n")
                  ("move cursor up one line" "p")
                  ("move cursor left" "b")
                  ("move cursor right" "f")
                  ("lookup documentation" "d"))
              (ht ("move cursor down one line" "j")
                  ("move cursor up one line" "k")
                  ("move cursor left" "h")
                  ("move cursor right" "l")
                  ("lookup documentation" "d")))))
    (should (set-equal?
             (generate-possible-editor-keybindings
              (ht ("move cursor down one line"
                   (ht ("j" (list :also-must-bind
                                  (ht ("move cursor left" '("h" "l"))
                                      ("move cursor up one line" "k")
                                      ("move cursor right" '("l" ";")))))))
                  ("move cursor up one line"
                   (ht ("k" (list :also-must-bind
                                  (ht ("move cursor left" '("h" "l"))
                                      ("move cursor down one line" "j")
                                      ("move cursor right" '("l" ";")))))))
                  ("move cursor left"
                   (ht ("h" (list :also-must-bind
                                  (ht ("move cursor down one line" "j")
                                      ("move cursor up one line" "k")
                                      ("move cursor right" "l"))))
                       ("l" nil)))
                  ("move cursor right"
                   (ht ("l" (list :also-must-bind
                                  (ht ("move cursor down one line" "j")
                                      ("move cursor up one line" "k")
                                      ("move cursor left" "h"))))
                       (";" (list :also-must-bind
                                  (ht ("move cursor down one line" "j")
                                      ("move cursor up one line" "k")
                                      ("move cursor left" "l"))))))))
             (list
              (ht ("move cursor down one line" "j")
                  ("move cursor up one line" "k")
                  ("move cursor left" "h")
                  ("move cursor right" "l"))
              (ht ("move cursor down one line" "j")
                  ("move cursor up one line" "k")
                  ("move cursor left" "l")
                  ("move cursor right" ";"))))))


  ;; "zoom" could be a possible z keybinding too. That could mean
  ;; narrowing or perhaps behavior similar to vim where you adjust the
  ;; position of the window (in this sense I think of "zoom" as being
  ;; kind of like a means of focusing on part of the buffer that is
  ;; important to you, like you zoom with a camera to get a better look
  ;; at something).

  ;; "zenith" could be a possible keybinding too. It could mean to go
  ;; "up" a structure to get to the zenith.


  ;; The backspace key (although it's called delete on other keys) could
  ;; be used to go "back" to the previous buffer like I had in my old
  ;; vim config.
  (let ((editor-behavior-to-possible-keybindings
         (ht ("deletes a text object"
              (ht ("d" (list :rationale "deletes"))
                  ("e" (list :rationale "erase"))
                  ("DEL" (list :rationale "delete/backspace key"))))
             ("cut text object"
              (ht ("x" (list :rationale "looks like a pair of scissors also it is cut in most other programs"))))
             ("copies a text object"
              (ht ("c" (list :rationale "copy"))
                  ("y" (list :rationale "yank the text out of a buffer"))))
             ("replaces a text object"
              (ht ("r" (list :rationale "replace"))
                  ("s" (list :rationale "substitute"))))
             ("changes a text object"
              (ht ("c" (list :rationale "change"))
                  ("m" (list :rationale "modify"))))
             ("evaluates a text object (for interpreted langauges)"
              (ht ("e" (list :rationale "evaluate"))
                  ("v" (list :rationale "the \"v\" in \"eval\""))))
             ("joins a text object into one line"
              (ht ("z" (list :rationale "zip lines together"))
                  ("j" (list :rationale "join"))
                  ("y" (list :rationale "yolk as a verb means to join"))))
             ("move cursor down one line"
              (ht ("n" (list :rationale "next"))
                  ("d" (list :rationale "down"))
                  ("j" (list :rationale "the vim binding, no mnemonic but mechanically convenient"
                             :also-must-bind
                             (ht ("move cursor left" '("h" "l"))
                                 ("move cursor up one line" "k")
                                 ("move cursor right" '("l" ";"))))))
              )
             ("move cursor up one line"
              (ht ("p" (list :rationale "previous"))
                  ("u" (list :rationale "up"))
                  ("k" (list :rationale "the vim binding, no mnemonic but mechanically convenient"
                             :also-must-bind (ht ("move cursor left" '("h" "l"))
                                                 ("move cursor down one line" "j")
                                                 ("move cursor right" '("l" ";")))))))
             ("move cursor left"
              (ht ("b" (list :rationale "back"))
                  ("l" (list :rationale "left"))
                  ("h" (list :rationale "the vim binding, no mnemonic but mechanically convenient"
                             :also-must-bind
                             (ht ("move cursor down one line" "j")
                                 ("move cursor up one line" "k")
                                 ("move cursor right" "l"))))))
             ("move cursor right"
              (ht ("f" (list :rationale "forward"))
                  ("r" (list :rationale "right"))
                  ("l" (list :rationale "the vim binding, no mnemonic but mechanically convenient"
                             :also-must-bind
                             (ht ("move cursor down one line" "j")
                                 ("move cursor up one line" "k")
                                 ("move cursor left" "h"))))
                  (";" (list :rationale "as long as it is bound with j, k, and l then the right hand literally rests on these keys"
                             :also-must-bind (ht ("move cursor down one line" "j")
                                                 ("move cursor up one line" "k")
                                                 ("move cursor left" "l"))))))
             ("move cursor forward one word"
              (ht ("w" (list :rationale "word"))))
             ("move cursor backwards one word"
              (ht ("W" (list :rationale "shifted version of 'w'"
                             :also-must-bind (ht ("move cursor forward one word" "w"))))
                  ("b" (list :rationale "backwards"))))
             ("move forwards by expression"
              (ht ("s" (list :rationale "could stand for \"structure\". Also, S-expression is the lispy term for any sort of expression in lisp"
                             :also-must-bind (ht ("move backwards by expression" "S"))))))
             ("move backwards by expression"
              (ht ("S" (list :rationale "the shifted version of 's'"
                             :also-must-bind (ht ("move forwards by expression" "s"))))))
             ("searches forward"
              (ht ("/" (list :rationale
                             "the character is a \"forward slash\" so we have the word \"forward\" in there"
                             :also-must-bind
                             (ht ("searches backwards" "?"))))
                  ("s" (list :rationale "search"))
                  ("f" (list :rationale "word could be find/forward and is also commonly used in other software"))))
             ("searches backwards"
              (ht ("?" (list :rationale
                             "the shifted version of \"/\""
                             :also-must-bind
                             (ht ("searches forward" "/"))))
                  ("r" (list :rationale "reverse search"))
                  ("b" (list :rationale "backwards search"))
                  ("S" (list :rationale "shifted version of 's'"
                             :also-must-bind (ht ("searches forward" "s"))))
                  ("F" (list :rationale "shifted version of 'f'"
                             :also-must-bind (ht ("searches forward" "f"))))))
             ("jumps forwards to a single character"
              (ht ("f" (list :rationale "go forward to the next character. This is vim's keybinding as well"
                             :also-must-bind (ht ("jumps backwards to a single character" "F"))))))
             ;; vim also has a motion 't' to move to the character
             ;; BEFORE the specified character but I've never found much
             ;; use for this as a motion, it really just seems useful to
             ;; me as a text object.
             ("jumps backwards to a single character"
              (ht ("F" (list :rationale "the shifted version of the 'f' binding. This is vim's keybinding as well"
                             :also-must-bind (ht ("jumps forwards to a single character" "f"))))))
             ("jumps to any character on the screen"
              (ht ("z" (list :rationale "you \"zip\" around the buffer"))
                  ("j" (list :rationale "jump"))))
             ("highlight text"
              (ht ("h" (list :rationale "highlight"))
                  ("v" (list :rationale "visually show what area of text is about to be operated on"))
                  ("s" (list :rationale "select text"))))
             ("undo change"
              (ht ("u" (list :rationale "undo"))))
             ("redo change"
              (ht ("U" (list :rationale "the shifted version of 'u'"
                             :also-must-bind (ht ("undo change" "u"))))))
             ("paste"
              (ht ("p" (list :rationale "paste"))))
             ("use register for text"
              (ht ("C-r" (list :rationale "r for register and it could be consistent in insert mode"))))
             ("go to definition"
              (ht ("D" (list :rationale "definition"))
                  ("S" (list :rationale "source code"))
                  ("M-." (list :rationale "this is the binding emacs uses"))))
             ("lookup documentation on"
              (ht ("D" (list :rationale "documentation. Use an uppercase instead of a lowercase because one won't likely need to quickly type characters after"))
                  ("K" (list :rationale "knowledge. Use an uppercase instead of a lowercase because one won't likely need to quickly type characters after"))))
             ("switch buffers"
              (ht ("b" (list :rationale
                             "buffer"))
                  ("C-b" (list :rationale
                               "buffer and it is a control chord so it can consistently be used in any scenario such as that of a REPL which will always be in insert mode"))
                  ("C-SPC" (list :rationale
                                 "buffer switching is so common and the space bar is a big key so it's mechanically very accessible. If we're really mnemonic hunting we could say we're launching a space ship to go to a new place"))))
             ("execute editor command"
              (ht ("M-x" (list :rationale
                               "This is what emacs does already so it's consistent but it also seems like a fine mnemonic since the 'x' can mean \"execute\""))))
             ("quits out of whatever emacs is doing"
              (ht ("C-g" (list :rationale "the key that emacs uses to do this"))
                  ("C-q" (list :rationale "stands for quit but uses the control key so it can consistently be used in any mode")))))))
    (length (-filter (lambda (keybindings) (equal (ht-get keybindings "deletes a text object") "d")) (generate-possible-editor-keybindings editor-behavior-to-possible-keybindings))))
#+end_src

- q
- w - move to the start of the next word
- e - move to the end of the current word
- r - replace text object with copied text
- t
- y
- u - undo
- i - insert mode at cursor
- o - open line or maybe this could be "overwrite"? Instead of
  replace assuming I want to have 'r' be a reverse search or something.
- p - paste. But I wonder if I could find another use for this.
- a - insert mode after cursor
- s - 
- d - delete text object
- f
- g
- h - highlight?
- j
- k - the help pages? "knowledge" could be the mnemonic
- l - maybe this could be open a line instead of o?
- z
- x - cut text object
- c - copy text object
- v - eval text object?
- b - to the beginning of the current word
- n
- m - modify text object (i.e. delete it and enter insert mode)
- [
- ]
- ;
- '
- . - repeat last action
- , - repeat last movement?
- /
- BACKSPACE
- SPACE
