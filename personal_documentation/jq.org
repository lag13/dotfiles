JQ Examples:

#+BEGIN_SRC bash
  aws ec2 describe-instances --instance-ids $instance_ids_arg | \
  # The reason I take the public IP over the private IP is that one time
  # I tried to ssh into the instance i-065185d05903e64bb but I couldn't
  # ssh using the private key but I could with the public one so I made
  # the assumption that public IPs are more reliable for ssh'ing.
  jq '.Reservations[].Instances[] |
  {"IpAddress": (if .PublicIpAddress == null then .PrivateIpAddress else .PublicIpAddress end),
   "InstanceId": .InstanceId,
   "KeyName": (.KeyName |
     if test("1/Guaranteed") then "Guaranteed Rate"
     elif test("kubernetes.k8s") then "kops-prod"
     elif test("terraform-") then "infrastructure"
     else . end)
  }'
#+END_SRC


I guess map(select()) will filter a list! Handy.
#+BEGIN_SRC bash
  cat markRobertsNewsroomContacts.json | \
      jq 'map(select(."first-name" == "Hannah" and ."last-name" == "Chan")) |
  map({"first-name",
       "last-name",
       email,
       "phone-cell",
       "phone-office",
       address,
       "employer-name",
       "creation-date"}) |
  sort_by(."creation-date")'
#+END_SRC

Get a list of instances and just print out their tags and instance IDs
and private IPs:
#+BEGIN_SRC bash
aws ec2 describe-instances --filters Name=network-interface.vpc-id,Values=vpc-b6c7bbdd | \
jq '.Reservations[].Instances[] | 
{"tags": .Tags, 
"InstanceId": .InstanceId,
"PrivateIpAddress": .PrivateIpAddress}'
#+END_SRC


Sorting the json objects and then outputting non json by using a
formatted string:
#+BEGIN_SRC bash
  aws ec2 describe-subnets --filters 'Name=tag:Name,Values=*private*' | \
      jq --raw-output '.Subnets | sort_by(.AvailabilityZone) | .[] | "  - cidr: \(.CidrBlock)\n    name: \(.AvailabilityZone)\n    type: Private\n    zone: \(.AvailabilityZone)\n    id: \(.SubnetId)"'
#+END_SRC


Act on an object if it does NOT have a key (you can see how to make it
act on an object with a key too):

echo '{"hey": "there", "buddy": "buddy"}'| jq 'select(has("hey") | not)'


Return the UserName if the object does NOT have a
PermissionsBoundaryArn OR if the PermissionsBoundaryArn is not what we
expect
#+BEGIN_SRC bash
echo '{
  "User": {
    "UserName": "testing"
  }
}
{
  "User": {
    "UserName": "testing2",
    "PermissionsBoundary": {
      "PermissionsBoundaryArn": "ignore-me"
    }
  }
}
{
  "User": {
    "UserName": "testing3",
    "PermissionsBoundary": {
      "PermissionsBoundaryArn": "notice-me"
    }
  }
}' | \
jq --raw-output '.User | 
if has("PermissionsBoundary") | not then .UserName
elif .PermissionsBoundary.PermissionsBoundaryArn | test("ignore-me") | not then .UserName
else empty end'
#+END_SRC


Seeing which deployments are using a given secret. All the question
marks seem to be a way of selecting deeper keys but first checking if
the key exists (or maybe swallowing up the error):

#+BEGIN_SRC bash
  kubectl-v1.8 --context gr18prod --namespace devops-prod get deployments --output json | \
      jq --raw-output '.items[] |
  select(.spec.template.spec.containers[]?.env[]?.valueFrom?.secretKeyRef?.name? == "devops-ec2") |
  .metadata.name'
#+END_SRC


UPDATE PARTS OF AN OBJECT!!! Also apparently doing [] on an object
yields that object's values. Neat.

echo '{
  "apiVersion": "v1",
  "data": {
    "AWS_ACCESS_KEY_ID": "QUtJQVNPTUVUSElORw==",
    "AWS_DEFAULT_REGION": "dXMtZWFzdC0x"
  }
}' | jq '.data[] |= @base64d'


Gets all the roles which are assumable by non-AWS entities and prints
that out in a more condensed format:

aws --profile root iam list-roles | \
jq '.Roles[] |
.AssumeRolePolicyDocument.Statement |= map(select(.Principal | has("AWS"))) |
select(.AssumeRolePolicyDocument.Statement | length > 0) |
{Arn, "assumableBy": [.AssumeRolePolicyDocument.Statement[].Principal.AWS] | flatten}'


Output a file on windows (apparently the '>' operator in windows uses UTF16LE encoding i.e. Unicode): https://stackoverflow.com/questions/67506478/how-to-write-to-json-file-using-jq-without-changing-binary-file-at-powershell
#+begin_src powershell
echo '{}' | jq . | Out-File  queryengine_q2_test_values_oauth.json -Encoding UTF8
#+end_src
